---
title: Alex G | Fullstack WebDev
---

<div class="container">
   <section class="scrollable-section" id="home">
     <%= partial "layouts/home" %>
   </section>
   <section class="scrollable-section" id="about">
     <%= partial "layouts/about" %>
   </section>
<!--    <section class="scrollable-section" id="projects">
     <%#= partial "layouts/projects" %>
   </section> -->
   <section class="scrollable-section" id="contact">
     <%= partial "layouts/contact" %>
   </section>
   <section class="scrollable-section" id="playground">
     <%= partial "layouts/playground" %>
   </section>
</div>





<script>
  const typed = new Typed('#typed', {
    stringsElement: '#typed-strings',
    typeSpeed: 120,
    loop: true
  });
</script>

<script>
  const quadrantItems = document.querySelectorAll('.quadrant__item');
  const svgs = document.querySelectorAll('svg');
  const cube = document.querySelector('.cube');
  const closeButton = document.querySelector('.quadrant__item__content--close');
  const isInside = false;

  const tl = new TimelineLite({paused: true});
  tl.timeScale(1.6);

  tl.to('.cube', 0.4, {rotation: 45, width: '120px', height: '120px', ease: Expo.easeOut}, 'first');
  tl.to('.plus .plus-vertical', 0.3, {height: '0', backgroundColor: '#fa0000', ease: Power1.easeIn}, 'first');
  tl.to('.plus .plus-horizontal', 0.3, {width: '0', backgroundColor: '#fa0000', ease: Power1.easeIn}, 'first');
  tl.to('.cube', 0, {backgroundColor: 'transparent'});
  tl.to(quadrantItems[0], 0.15, {x: -5, y: -5}, 'seperate');
  tl.to('.arrow-up', 0.2, {opacity: 1, y: 0}, 'seperate+=0.2');
  tl.to(quadrantItems[1], 0.15, {x: 5, y: -5}, 'seperate');
  tl.to('.arrow-right', 0.2, {opacity: 1, x: 0}, 'seperate+=0.2');
  tl.to(quadrantItems[3], 0.15, {x: 5, y: 5}, 'seperate');
  tl.to('.arrow-down', 0.2, {opacity: 1, y: 0}, 'seperate+=0.2');
  tl.to(quadrantItems[2], 0.15, {x: -5, y: 5}, 'seperate');
  tl.to('.arrow-left', 0.2, {opacity: 1, x: 0}, 'seperate+=0.2');

  cube.addEventListener('mouseenter', playTimeline);
  cube.addEventListener('mouseleave', reverseTimeline);

  function playTimeline(e) {
    e.stopPropagation();
    tl.play();
  }

  function reverseTimeline(e) {
    e.stopPropagation();
    tl.timeScale(1.8);
    tl.reverse();
  }
</script>

<!-- <script>
  //initialize
  var winHeight = $(window).height(),
      pages = $('.scrollable-section'),
      navLinks = $('.navbar-link'),
      currentPage = 0;

  $('html, body').animate({ scrollTop: 0}, 0);

  // listen to the mousewheel scroll
  $(window).on('mousewheel DOMMouseScroll', function(e){

      //by default set the direction to DOWN
      var direction = 'down',
      $th = $(this),
      // depending on the currentPage value we determine the page offset
      currentPageOffset = currentPage * winHeight;

      // if the value of these properties of the even is positive then the direction is UP
      if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
          direction = 'up';
      }

     // if the direction is DOWN and the currentPage increasing won't exceed
     // the number of PAGES divs, then we scroll downward and increase the value
     // of currentPage for further calculations.
     if(direction == 'down' && currentPage <= pages.length - 2){
         $th.scrollTop(currentPageOffset + winHeight);
         currentPage++;
     } else if(direction == 'up' && currentPage >= 0) {
         // else scroll up and decrease the value of currentPage IF the direction
         //  is UP and we're not on the very first slide
         $th.scrollTop(currentPageOffset - winHeight);
         currentPage--;
     }
  });

  // as final step we need to update the value of currenPage upon the clicking of the
  // navbar links to insure having correct value of currentPage
  navLinks.each(function(index){
      $(this).on('click', function(){
      navLinks.parent().removeClass('current');
      $(this).parent().addClass('current');
      currentPage = index;
    });
  });
</script> -->
